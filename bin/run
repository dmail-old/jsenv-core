#!/usr/bin/env node

var commandAPI = require('../lib/command-api/index.js');

function startCommand(params) {
    require('../index.js');

    global.setup().then(function(jsenv) {
        jsenv.debug('start with params', params);

        jsenv.config({
            url: './plugins/exception-handler/index.js',
            after: function(module) {
                var exceptionHandler = module.default;

                exceptionHandler.install(jsenv);
                exceptionHandler.enable();
            }
        });

        jsenv.config({
            url: './plugins/module-script-name/index.js'
        });

        jsenv.config({
            url: './plugins/module-source/index.js'
        });

        jsenv.config({
            url: './plugins/module-source-transpiled/index.js'
        });

        jsenv.config({
            url: './plugins/module-source-map/index.js'
        });

        jsenv.config({
            url: './plugins/agent-node/exception-stacktrace/index.js'
        });

        function stripTrailingSep(pathname) {
            if (pathname[pathname.length - 1] === '/') {
                pathname = pathname.slice(0, -1);
            }
            return pathname;
        }

        function urlIsSiblingOrDescendantOf(url, otherUrl) {
            url = new global.URL(url, otherUrl);
            otherUrl = new global.URL(otherUrl);

            if (url.protocol !== otherUrl.protocol) {
                return false;
            }
            if (url.host !== otherUrl.host) {
                return false;
            }
            if (url.port !== otherUrl.port) {
                return false;
            }

            var pathname = stripTrailingSep(url.pathname);
            var potentialParentOrSibling = stripTrailingSep(otherUrl.pathname);
            var potentialDirname = potentialParentOrSibling.slice(0, potentialParentOrSibling.lastIndexOf('/'));

            return pathname.startsWith(potentialDirname);
        }

        if (params.test) {
            jsenv.config(function() {
                jsenv.test(jsenv.mainLocation);
            });
        }
        if (params.cover) {
            jsenv.config(function() {
                var options = {
                    urlIsPartOfCoverage: function(url) {
                        // the url must be a sibling or a descendant of engine.mainLocation
                        return urlIsSiblingOrDescendantOf(url, jsenv.mainLocation);
                    }
                };

                // most time we do code coverage test to see how a file is covering all it's dependencies
                // so checking that the file is the mainLocation or a peer or inside is sufficient
                return jsenv.coverage.install(options);
            });

            jsenv.run(function() {
                var mainLocation = jsenv.mainLocation;
                var options = {
                    directory: jsenv.locateFrom('error-coverage', mainLocation, true),
                    reportConsole: true
                };

                return jsenv.coverage.collect(jsenv.coverage.value).then(function(collector) {
                    return jsenv.coverage.report(collector, options);
                });
            });
        }

        var moduleName = params[0];
        moduleName = './test/modules/module-error.js';

        return jsenv.importMain(moduleName).then(function(module) {
            module.default();
        });
    });
}

function versionCommand() {
    var path = require('path');
    var packagePath = path.resolve(__dirname, '../package.json');
    var packageMeta = require(packagePath);
    console.log(packageMeta.version);
}

var commandSignatures = {
    0: {
        type: 'string',
        params: {
            cover: {
                type: 'boolean',
                default: false,
                params: {
                    output: {
                        type: 'array',
                        enum: ['console', 'json'],
                        default: ['console']
                    }
                }
            },
            test: {
                type: 'boolean',
                default: false,
                params: {
                    output: {
                        type: 'array',
                        enum: ['console', 'json'],
                        default: ['console']
                    }
                }
            }
        },
        fn: startCommand
    },
    version: {
        type: 'boolean',
        default: false,
        fn: versionCommand
    },
    usage: {
        fn: function() {
            console.log('system-run <path>');
        }
    }
};

var commandApi = commandAPI(commandSignatures);
commandApi.exec(process.argv.slice(2));
